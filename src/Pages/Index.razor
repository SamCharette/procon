@page "/"
@using procon.Features.Reasons
@using procon.Features.Reasons.Value_Objects

@if (_showEditor)
{
    <input class="form-control" value="@Question" @onchange="@((ChangeEventArgs __e) => ChangeQuestion(__e.Value.ToString()))" />
}
else
{
    <h2 @onclick="@(() => _showEditor = !_showEditor)">@Question</h2>
}


@if (_reasonList != null)
{

    <div class="row @MainClass()">
        <div class="col-md-6 @ProsClass()">
            <ReasonList Name="Pros" Reasons="@_reasonList.Where(x => x.IsPro()).ToList()"></ReasonList>
        </div>
        <div class="col-md-6 @ConsClass()">
            <ReasonList Name="Cons" Reasons="@_reasonList.Where(x => x.IsCon()).ToList()"></ReasonList>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            Total : @ProsTotal()
            <button type="button" class="btn btn-success btn-block">Add Pro</button>
        </div>
        <div class="col-md-6">
            Total : @ConsTotal()
            <button type="button" class="btn btn-danger btn-block">Add Con</button>
        </div>
    </div>
}


@code
{
    private bool _showEditor = false;
    private int _threshold = 2;

    private string MainClass()
    {
        return Math.Abs(Total()) <= _threshold ? "alert-warning" : "";
    }

    private string ProsClass()
    {
        return IsOverallPositive() ? "alert-success" : "";
    }

    private string ConsClass()
    {
        return IsOverallNegative() ? "alert-danger" : "";
    }

    private List<Reason> _reasonList;

    private string Question = "Click to change the question.";

    private decimal ProsTotal()
    {
        return _reasonList.Where(x => x.IsPro()).Sum(x => x.TotalValue);
    }

    private decimal ConsTotal()
    {
        return _reasonList.Where(x => x.IsCon()).Sum(x => x.TotalValue);
    }

    private decimal Total()
    {
        return _reasonList.Sum(x => x.TotalValue);
        
    }

    private bool IsOverallPositive()
    {
        return Total() > _threshold;
    }

    private bool IsOverallNegative()
    {
        return Total() < -_threshold;
    }

    private void ChangeQuestion(string newQuestion)
    {
        Question = newQuestion;
        _showEditor = !_showEditor;
    }

    protected override async Task OnInitializedAsync()
    {
        _reasonList = new List<Reason>
        {
            new Reason(new Description("Good thing"), new Weight(11), new Probability(100)),
            new Reason(new Description("Bad thing"), new Weight(-10), new Probability(50))
        };
    }
}
